#[cfg(test)]
mod test;

pub mod opcode;
pub mod cpu;

use cpu::CPU;
use macroquad::prelude::*;

fn map_rgb_to_rgba(array : &[u8;32 * 3 * 32]) -> [u8 ; 32 * 4 * 32] {
    let mut result = [0_u8 ; 32 * 4 * 32 ];
    let mut big_counter = 0;
    let mut small_counter = 0;
    while small_counter < 32 * 32 * 3 {
        result[big_counter] = array[small_counter];
        result[big_counter + 1] = array[small_counter + 1];
        result[big_counter + 2] = array[small_counter + 2];
        result[big_counter + 3] = 255;
        big_counter += 4;
        small_counter +=3;
    }
    result
}

fn color(byte: u8) -> Color {
    match byte {
        0 => BLACK,
        1 => WHITE,
        2 | 9 => GRAY,
        3 | 10 => RED,
        4 | 11 => GREEN,
        5 | 12 => BLUE,
        6 | 13 => MAGENTA,
        7 | 14 => YELLOW,
        _ => PINK,
    }
}

fn handle_user_input(cpu : &mut CPU) {
    if is_key_down(KeyCode::Escape) || is_quit_requested() {
        std::process::exit(0);
    }
    else if is_key_down(KeyCode::Z) {
        cpu.mem_write(0xFF, 0x77);
    }

    else if is_key_down(KeyCode::Q) {
        cpu.mem_write(0xFF, 0x61);
    }

    else if is_key_down(KeyCode::S) {
        cpu.mem_write(0xFF, 0x73);
    }

    else if is_key_down(KeyCode::D){
        cpu.mem_write(0xFF, 0x64);
    }

}

fn read_screen_state(cpu : &CPU , frame : &mut [u8; 32 * 3 * 32]) -> bool {
    let mut frame_idx = 0;
    let mut update = false;
    for i in 0x200..0x600 {
        let color_idx = cpu.mem_read(i);
        let Color{ r : b1 , g : b2 , b : b3 , a: _} = color(color_idx);
        if frame[frame_idx] != (b1 * 255.0) as u8  || frame[frame_idx + 1] != (b2 * 255.0) as u8 || frame[frame_idx + 2] != (b3 * 255.0) as u8 {
            frame[frame_idx] = (b1 * 255.0) as u8;
            frame[frame_idx + 1] = (b2 * 255.0) as u8;
            frame[frame_idx + 2] = (b3 * 255.0) as u8;
            update = true
        }
        frame_idx +=3;
    }

    update
}

fn window_conf() -> Conf {
    Conf {
        window_title : "NES_EMULATOR".to_owned(),
        // window_height : 32 * 10,
        // window_width : 32 * 10,
        ..Default::default()
    }
}
#[macroquad::main(window_conf)]
async fn main() {

    
let game_code = vec![
    0x20, 0x06, 0x06, 0x20, 0x38, 0x06, 0x20, 0x0d, 0x06, 0x20, 0x2a, 0x06, 0x60, 0xa9, 0x02, 0x85,
    0x02, 0xa9, 0x04, 0x85, 0x03, 0xa9, 0x11, 0x85, 0x10, 0xa9, 0x10, 0x85, 0x12, 0xa9, 0x0f, 0x85,
    0x14, 0xa9, 0x04, 0x85, 0x11, 0x85, 0x13, 0x85, 0x15, 0x60, 0xa5, 0xfe, 0x85, 0x00, 0xa5, 0xfe,
    0x29, 0x03, 0x18, 0x69, 0x02, 0x85, 0x01, 0x60, 0x20, 0x4d, 0x06, 0x20, 0x8d, 0x06, 0x20, 0xc3,
    0x06, 0x20, 0x19, 0x07, 0x20, 0x20, 0x07, 0x20, 0x2d, 0x07, 0x4c, 0x38, 0x06, 0xa5, 0xff, 0xc9,
    0x77, 0xf0, 0x0d, 0xc9, 0x64, 0xf0, 0x14, 0xc9, 0x73, 0xf0, 0x1b, 0xc9, 0x61, 0xf0, 0x22, 0x60,
    0xa9, 0x04, 0x24, 0x02, 0xd0, 0x26, 0xa9, 0x01, 0x85, 0x02, 0x60, 0xa9, 0x08, 0x24, 0x02, 0xd0,
    0x1b, 0xa9, 0x02, 0x85, 0x02, 0x60, 0xa9, 0x01, 0x24, 0x02, 0xd0, 0x10, 0xa9, 0x04, 0x85, 0x02,
    0x60, 0xa9, 0x02, 0x24, 0x02, 0xd0, 0x05, 0xa9, 0x08, 0x85, 0x02, 0x60, 0x60, 0x20, 0x94, 0x06,
    0x20, 0xa8, 0x06, 0x60, 0xa5, 0x00, 0xc5, 0x10, 0xd0, 0x0d, 0xa5, 0x01, 0xc5, 0x11, 0xd0, 0x07,
    0xe6, 0x03, 0xe6, 0x03, 0x20, 0x2a, 0x06, 0x60, 0xa2, 0x02, 0xb5, 0x10, 0xc5, 0x10, 0xd0, 0x06,
    0xb5, 0x11, 0xc5, 0x11, 0xf0, 0x09, 0xe8, 0xe8, 0xe4, 0x03, 0xf0, 0x06, 0x4c, 0xaa, 0x06, 0x4c,
    0x35, 0x07, 0x60, 0xa6, 0x03, 0xca, 0x8a, 0xb5, 0x10, 0x95, 0x12, 0xca, 0x10, 0xf9, 0xa5, 0x02,
    0x4a, 0xb0, 0x09, 0x4a, 0xb0, 0x19, 0x4a, 0xb0, 0x1f, 0x4a, 0xb0, 0x2f, 0xa5, 0x10, 0x38, 0xe9,
    0x20, 0x85, 0x10, 0x90, 0x01, 0x60, 0xc6, 0x11, 0xa9, 0x01, 0xc5, 0x11, 0xf0, 0x28, 0x60, 0xe6,
    0x10, 0xa9, 0x1f, 0x24, 0x10, 0xf0, 0x1f, 0x60, 0xa5, 0x10, 0x18, 0x69, 0x20, 0x85, 0x10, 0xb0,
    0x01, 0x60, 0xe6, 0x11, 0xa9, 0x06, 0xc5, 0x11, 0xf0, 0x0c, 0x60, 0xc6, 0x10, 0xa5, 0x10, 0x29,
    0x1f, 0xc9, 0x1f, 0xf0, 0x01, 0x60, 0x4c, 0x35, 0x07, 0xa0, 0x00, 0xa5, 0xfe, 0x91, 0x00, 0x60,
    0xa6, 0x03, 0xa9, 0x00, 0x81, 0x10, 0xa2, 0x00, 0xa9, 0x01, 0x81, 0x10, 0x60, 0xa2, 0x00, 0xea,
    0xea, 0xca, 0xd0, 0xfb, 0x60
];

let mut cpu = CPU::new();
cpu.load(game_code);
cpu.reset();

let mut screen_state : [u8 ; 32 * 3 * 32 ] = [255;32 * 3 * 32];
let texture_bytes = map_rgb_to_rgba(&screen_state);
let texture = Texture2D::from_rgba8(32, 32, &texture_bytes);
let mut params =  DrawTextureParams::default();
params.dest_size = Some(Vec2::new(32.0 * 10.0, 32.0 * 10.0));


cpu.run_with_callback(move |cpu|  {
    handle_user_input(cpu);
    cpu.mem_write(0xFE , rand::gen_range(1,16));

    if read_screen_state(cpu, &mut screen_state) {
        texture.update_from_bytes(32, 32, &map_rgb_to_rgba(&screen_state));
        draw_texture_ex(&texture, 0.0, 0.0, WHITE, params.clone());
        
    }
}).await;


}
